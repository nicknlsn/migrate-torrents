#!/bin/bash

usage() {
    echo "$(basename "$0")
migrate torrents

This script migrates the .torrent and .resume files of transmission torrents from one client to another. This script
does not move the actual data files.

Usage: $(basename "$0") -s sourceRpcHost,sourceSshHost,sourceTorrentPath,sourceResumePath -d destinationSshHost,destinationTorrentPath,destinationResumePath

Options:
	-s	--source		a comma seperated list of required data in the following order:
					sourceRpcHost: the host and port of the source transmission client, e.g. 192.168.1.140:9091
					sourceSshHost: the user and host details to establish an ssh connection with the source,
					       	       e.g. root@192.168.1.140
					sourceTorrentPath: the path on the source host to the torrent files
					sourceResumePath: the pash on the source host to the resume files
					example: 192.168.1.140:9091,root@192.168.1.140,/mnt/torrents/config/torrents,/mnt/torrents/config/resume

	-d	--destination		a comma seperated list of required data in the following order:
					destinationRpcHost: the host and port of the destination transmission client, e.g. 192.168.1.142:9091
					destinationSshHost: the user and host details to establish an ssh connection with the
						    	    destination, similar to the sourceSshHost above
					destinationTorrentPath: the path on the destination host where the torrent files should
								be placed
					destinationResumePath: the path on the destination host where the resume files should be
						       	       placed
					example: 192.168.1.185:9091,root@192.168.1.185,/mnt/torrents/config,torrents,/mnt/torrents/config/resume

	-c	--conditions		a comma separated list of key value pairs of conditions that should evaluate to true in
					order for a torrent to be migrated. this argument is optional, if absent all torents will be
					migrated.
					example: Location:/downloads,Tracker:sometracker
					this example will only migrate a torrent if it's location contains \"/downloads\" and the tracker
					contains \"sometracker\". the way this works is the key (Location) is greped out of the torrent
					details as returned from 'transmission-remote -t 1 -i' and 'transmission-remote -t 1 -it', and
					if the result contains the text of the value it evaluates to true.

	--age N				only migrate if older than N seconds. this is another condition but to prevent the conditions argument
					from getting too complex, this age condition is it's own argument.

	-l	--limit N		only migrate the first N torrents

	-r	--remove-from-source	remove the torrent from the source client after it has been migrated

	--dry-run			don't actually migrate anything, intead just print the commands that will be run during the
					actual migration

	-v	--verbose		print lots of extra information about what is going on. without this option this script will
					print nothing

	-h	--help			print this usage message and exit
    "
}

# make sure dependency tools are available
for dependency in transmission-remote scp; do
    command -v $dependency >/dev/null 2>&1 || { echo >&2 "This script requires $dependency but it's not installed. Aborting."; exit 1; }
done

# parse arguments
positional=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
	-s|--source)
	    source="$2"
	    shift # past argument
	    shift #past value
	    ;;
	-d|--destination)
	    destination="$2"
	    shift
	    shift
	    ;;
	-c|--conditions)
	    conditions="$2"
	    shift
	    shift
	    ;;
	--age)
	    age="$2"
	    shift
	    shift
	    ;;
	-l|--limit)
	    limit="$2"
	    shift
	    shift
	    ;;
	-r|--remove-from-source)
	    remove=true
	    shift
	    ;;
	--dry-run)
	    dryRun=true
	    shift
	    ;;
	-v|--verbose)
	    verbose=true
	    shift
	    ;;
	-h|--help)
	    usage
	    exit
	    ;;
    esac
done

if [ ! -z $verbose ]
then
    echo "provided parameters:"
    echo "source: $source"
    echo "destination: $destination"
    echo "conditions: $conditions"
    echo "age: $age"
    echo "limit: $limit"
    echo "remove: $remove"
    echo "verbose: $verbose"
fi

# make sure all required arguments are present
if [ -z $source ]
then
    echo "source parameter is required but missing. use -s to add it. use -h for usage"
    exit 1
fi
if [ -z $destination ]
then
    echo "destination parameter is required but missing. use -d to add it. use -h for usage"
    exit 1
fi

IFS=',' read sourceRpcHost sourceSshHost sourceTorrentPath sourceResumePath <<< "$source"
IFS=',' read destinationRpcHost destinationSshHost destinationTorrentPath destinationResumePath <<< "$destination"
IFS=',' read -r -a conditionsArray <<< "$conditions"

if [ ! -z $verbose ]
then
    echo "sourceRpcHost: $sourceRpcHost"
    echo "sourceSshHost: $sourceSshHost"
    echo "sourceTorrentPath: $sourceTorrentPath"
    echo "sourceResumePath: $sourceResumePath"
    echo "destinationRpcHost: $destinationRpcHost"
    echo "destinationSshHost: $destinationSshHost"
    echo "destinationTorrentPath: $destinationTorrentPath"
    echo "destinationResumePath: $destinationResumePath"
    echo "conditionsArray: ${conditionsArray[*]}"
fi
if [ -z $sourceRpcHost ] || [ -z $sourceSshHost ] || [ -z $sourceTorrentPath ] || [ -z $sourceResumePath ]
then
    echo "could not parse source argument: $source"
    echo "use -h for usage"
    exit 1
fi
if [ -z $destinationRpcHost ] || [ -z $destinationSshHost ] || [ -z $destinationSshHost ] || [ -z $destinationResumePath ]
then
    echo "could not parse destination argument: $destination"
    echo "use -h for usage"
    exit 1
fi
if [ ! -z "$conditions" ] && [ ! -z "$conditionsArray" ]
then
    # make sure each condition can be parsed for evaluation
    for i in "${!conditionsArray[@]}"
    do
	if [ ! -z $verbose ]; then echo "$i: ${conditionsArray[i]}"; fi
	IFS=':' read grepItem value <<< "${conditionsArray[i]}"
	if [ -z $grepItem ] || [ -z "$value" ]
	then
	    echo "could not parse condition at index $i: ${conditionsArray[i]}"
	    echo "use -h for usage"
	    exit 1;
	fi
    done
fi

# start doing work
function evalutateCondition() {
    local __result=$1
    local results=()
    for i in "${!conditionsArray[@]}"
    do
	if [ ! -z $verbose ]; then echo "evaluating condition $i: ${conditionsArray[i]}"; fi
	IFS=':' read grepItem value <<< "${conditionsArray[i]}"
	if [ ! -z $verbose ]; then echo "grepItem: $grepItem, value: $value"; fi
	grepResult="$(echo "$2" | grep "$grepItem")"
	if [ ! -z $verbose ]; then  echo "grep result: $grepResult"; fi
	if [[ "$grepResult" == *"$value"* ]]; then results+=( true ); else results+=( false ); fi
    done
    if [ ! -z $age ]
    then
	# if there is no finished date yet, this will evaluate to false
	if [ ! -z $verbose ]; then echo "checking if torrent is $age or more seconds old"; fi
	finishedDate=$(date -d "$(echo "$2" | grep "Date finished" | cut -d : -f 2- | sed -e 's/^[[:space:]]*//')" +%s)
	compareDate=$(($(date +%s)-$age))
	if [ ! -z $verbose ]; then echo "finishedDate: $finishedDate; compareDate: $compareDate"; fi
	if [ $finishedDate -le $compareDate ]; then results+=( true ); else results+=( false ); fi
    fi
    if [ ! -z $verbose ]; then echo "evaluation results: ${results[*]}"; fi
    [[ " ${results[@]} " =~ " false " ]] && result=false || result=true
    eval $__result="'$result'"
}

# get number of torrents at the source
if [ ! -z $verbose ]; then echo "querying sourceRpcHost to get torrent count"; fi
until torrentList="$(transmission-remote $sourceRpcHost -l)"; do sleep 1; done
numTorrents="$(echo "$torrentList" | tail -n 2 | head -n 1 | awk '{print $1}' | tr -d '*')"
if [ ! -z $verbose ]; then echo "torrent count: $numTorrents"; fi
if ! [[ $numTorrents =~ ^[0-9]+$ ]]; then echo "no torrents found at source"; exit 1; fi

if [ ! -z $limit ]; then migrated=0; fi

for t in $(seq 1 $numTorrents)
do
    if [ ! -z $limit ]; then if [ $limit -le $migrated ]; then echo "reached limit"; break; fi; fi

    # get the deets
    if [ ! -z $verbose ]; then echo -n "torrent $t: "; fi
    until details="$(transmission-remote $sourceRpcHost -t $t -i)"; do sleep 1; done
    until details="${details}\n$(transmission-remote $sourceRpcHost -t $t -it)"; do sleep 1; done
    if [[ -z "${details//\\n}" ]]; then echo "empty torrent number"; continue; fi
    if [ ! -z $verbose ]; then echo -e "\n$details"; fi

    # if there are conditions, only migrate if they evaluate to true
    if [ ! -z "$conditionsArray" ]
    then
	evalutateCondition shouldMigrate "$details"
    else
	shouldMigrate=true
    fi
    if [ ! -z $verbose ]; then echo "should migrate: $shouldMigrate"; fi

    if [ "$shouldMigrate" = "true" ]
    then
	name="$(echo "$details" | grep "Name:" | cut -d : -f 2 | sed -e 's/^[[:space:]]*//')"

	if [ ! -z $dryRun ]
	then
	    echo "scp $sourceSshHost:$sourceTorrentPath/$name.*.torrent $destinationSshHost:$destinationTorrentPath/."
	    echo "scp $sourceSshHost:$sourceResumePath/$name.*.resume $destinationSshHost:$destinationResumePath/."
	    echo "transmission-remote $sourceRpcHost -a $name.torrent"
	    if [ ! -z $remove ]
	    then
		echo "transmission-remote $sourceRpcHost -t $t -r"
	    fi
	else
	    # execute
	    if [ ! -z $verbose ]; then echo "transfering .torrent and .resume files"; fi
	    if scp "$sourceSshHost:$sourceTorrentPath/\"$name\".*.torrent" "$destinationSshHost:$destinationTorrentPath/."
	    then
	        if [ ! -z $verbose ]; then echo "done transfering .torrent file"; fi
	    	if scp "$sourceSshHost:$sourceResumePath/\"$name\".*.resume" "$destinationSshHost:$destinationResumePath/."
		then
	            if [ ! -z $verbose ]; then echo "done transfering .resume file"; fi
	            if [ ! -z $verbose ]; then echo "copying temp .torrent file"; fi
		    # copy .torrent file to local temp file
		    tmpTorrentFile=$(mktemp /tmp/"$name".torrent.XXXXXX)
	            if [ ! -z $verbose ]; then echo "created empty temp file: $tmpTorrentFile"; fi
		    if scp -T "$sourceSshHost:$sourceTorrentPath/\"$name\".*.torrent" "$tmpTorrentFile"
		    then
	                if [ ! -z $verbose ]; then echo "temp .torrent file: $tmpTorrentFile"; fi
		        # add .torrent file to destination host
	                if [ ! -z $verbose ]; then echo "adding temp .torrent file"; fi
		        until addTorrentResponse="$(transmission-remote $destinationRpcHost -a "$tmpTorrentFile")"; do sleep 1; done
	                if [ ! -z $verbose ]; then echo "add response: $addTorrentResponse"; fi
		        rm "$tmpTorrentFile"
		        if [[ "$addTorrentResponse" == *"success"* ]] && [ ! -z $remove ]
		        then
			    if [ ! -z $verbose ]; then echo "removing torrent $t"; fi
			    until removeResponse="$(transmission-remote $sourceRpcHost -t $t -r)"; do sleep 1; done
			    if [ ! -z $verbose ]; then echo "remove response: $removeResponse"; fi
		        else
			    echo "not removing torrent because add failed"
		        fi
			if [ ! -z $limit ]; then ((migrated=migrated+1)); echo "migrated: $migrated"; fi
		    else
			echo "failed to copy temp .torrent file: $name"
			rm "$tmpTorrentFile"
		    fi
		else
		    echo "failed to copy .resume file: $name"
		fi
	    else
		echo "failed to copy .torrent file: $name"
	    fi
	fi
    fi

    if [ ! -z $verbose ]; then echo "done"; fi
done
